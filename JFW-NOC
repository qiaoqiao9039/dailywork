#!/usr/bin/perl
#
# Usage
#

use strict;
use warnings;

use lib '/nas/reg/lib/perl';
use lib '/nas/utl/lib/perl';
#use lib '/nas/home/minjzhang/ops/util/lib';

use Readonly;
use Getopt::Long;
use Net::SSH::Expect;
use Term::ANSIColor;

# Get options
my $show_usage = qw{};
my $show_verbose = qw{};
my $lba_username = qw{};
my $lba_password = qw{};
my $list_listname = qw{};
my $add_listname = qw{};
my $del_listname = qw{};
my $ip_address = qw{};
my $options_okay = GetOptions (
   'u|username=s' => \$lba_username,
   'x|password=s' => \$lba_password,
   'l|list=s'     => \$list_listname,
   'a|add=s'      => \$add_listname,
   'd|delete=s'   => \$del_listname,
   'v|verbose'    => \$show_verbose,
   'h|help'       => \$show_usage,
);

foreach my $rest_arg ( @ARGV ) {
    $rest_arg = "\"$rest_arg\"";
    $ip_address .= $rest_arg . " ";
}
$ip_address =~ s/ $// if defined $ip_address;
@ARGV = qw{};

#
# Signal Handler
#
$SIG{'INT'} = \&sigIntHandler;

#
# Clean up and exit when catch SIGINT(2)
#
sub sigIntHandler {
    exit 1;
}

if ( $show_usage ) {
   usage();
   exit 0;
}

#
# Usage
#
sub usage {
   print <<END_OF_HELP

-------------------------------------------------------------------
| Configure block/unblock list interactively.                     |
| Usage: Cloak-Uncloak [options]                                  |
| Options:                                                        |
-------------------------------------------------------------------
Usage: Cloak-uncloak [options] [ip address / hackercracker]

Options:
 -u | --username          Specify the username to login to LBA server.
 -x | --password          Specify the password to login to LBA server.
 -l | --list              Specify the list to show.
 -a | --add               Specify the list to add to.
 -d | --delete            Specify the list to delete from.
 -h | --help              Show help information.

Examples:
 Cloak-uncloak
 Cloak-uncloak -l blacklist
 Cloak-uncloak -a whitelist 1.1.1.1
 Cloak-uncloak -a whitelist 1.1.1.1 2.2.2.2
 Cloak-uncloak -d whitelist 1.1.1.1
 Cloak-uncloak -a hackercrackerlist "Mozilla/5.0 (Windows NT 6.1; WOW64)"

END_OF_HELP
}

#
#
#
sub login_ssh {
    my ( $hostname, $username, $password ) = @_;

    my $ssh = Net::SSH::Expect->new(
        host => "$hostname",
        user => "$username",
        raw_pty => 1
    );

    my $prompt = "[Pp]assword";
    $ssh->run_ssh();
#    $ssh->waitfor('qr/\(yes\/no\)\?$/',2);
#    $ssh->send("yes\n");
    $ssh->waitfor('qr/$prompt:\s*$/',5);
    $ssh->send("$password\n");
#    my $login_welcome = $ssh->exec("show sys version");

#    if ( not defined $login_welcome or $login_welcome !~ m/Last login/ ) {
#        die "Login has failed. No output." if not defined $login_welcome;
#        die "Login has failed. Login output was $login_welcome";
#    }

    return $ssh;
}

#
# Close ssh connection
#
sub close_ssh {
    my ( $ssh ) = @_;
    $ssh->close();
}

#
# Execute command via ssh mutely
#
sub mute_execute_ssh {
    my ( $ssh, $command ) = @_;
    my $output = $ssh->exec($command);
    my @original_outputs = split(/\n/, $output);
    my @outputs;
    foreach my $line ( @original_outputs ) {
        if ( $line !~ /tmos/ ) {
            chomp $line;
            push(@outputs, $line);
        }
    }
    return @outputs;
}

#
# Execute command via ssh
#
sub execute_ssh {
    my ( $ssh, $command ) = @_;
    my @outputs = mute_execute_ssh( $ssh, $command );
    print join "\n", @outputs;
}

#
# Show current source address
#
sub print_source_address {
}

sub print_policy {
    my ( $ssh, $policy, $hostname ) = @_;
    print "$ssh\n";
    my $cmd = "show security policies from-zone DMZ-BE-PE to-zone TRANSIT policy-name $policy detail | no-more";
    my @outputs = mute_execute_ssh( $ssh, "$cmd" );
    foreach my $line ( @outputs ) {
        print "$line\n";
    }
}

#
# Get current timestamp.
#
sub get_current_time {
    my ( $sec, $min, $hour, $mday, $mon, $year, $wday, $yday, $isdst ) = localtime(time);
    my $nice_timestamp = sprintf( "%04d-%02d-%02d %02d:%02d:%02d",
                            $year+1900, $mon+1, $mday, $hour, $min, $sec);
    return $nice_timestamp;
}

#
# Get username and password.
#
sub get_username_password {
    my ( $lba_username, $lba_password ) = @_;

    if ( not defined $lba_username ) {
        print "Username: ";
        $lba_username = <>;
        chomp $lba_username;
    }
    if ( not defined $lba_password ) {
        print "Password: ";
        system("stty -echo");
        $lba_password = <>;
        chomp $lba_password;
        system("stty echo");
        print "\n";
    }

    return ( $lba_username, $lba_password );
}

#
# Main
#
my $hostname="10.131.70.1";
my $listname="ping";
my ( $jfw_username, $jfw_password ) = get_username_password( $lba_username, $lba_password );
my $ssh = login_ssh( $hostname, $jfw_username, $jfw_password );
print_policy( $ssh, $listname, $hostname);
